import { GoogleGenAI, Modality } from "@google/genai";
import type { AspectRatio } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const extractImageFromResponse = (response: any): string => {
  if (response.candidates && response.candidates[0].content.parts) {
      for (const part of response.candidates[0].content.parts) {
          if (part.inlineData) {
              const base64ImageBytes: string = part.inlineData.data;
              return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
          }
      }
  }
  throw new Error("No image part found in the response.");
};


export const generateImage = async (prompt: string, aspectRatio: AspectRatio, style: string, referenceImage?: { data: string; mimeType: string; }): Promise<string> => {
  const fullPrompt = style && style.toLowerCase() !== 'none' && style.toLowerCase() !== 'photorealistic' 
    ? `${prompt}, in the style of ${style}` 
    : prompt;
  
  try {
    if (referenceImage) {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: referenceImage.data,
                            mimeType: referenceImage.mimeType,
                        },
                    },
                    {
                        text: `Generate a new image inspired by the provided one, focusing on this theme: ${fullPrompt}. Do not include any text in the image.`,
                    },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        return extractImageFromResponse(response);
    } else {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: aspectRatio,
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    }
  } catch (error) {
    console.error("Gemini API error in generateImage:", error);
    throw new Error("Failed to generate image. Please check your prompt or API key.");
  }
};

export const removeBackground = async (base64ImageData: string): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: 'image/jpeg', // Assuming jpeg, could be dynamic
            },
          },
          {
            text: 'remove the background, make it transparent',
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });
    return extractImageFromResponse(response);
  } catch (error) {
    console.error("Gemini API error in removeBackground:", error);
    throw new Error("Failed to remove background.");
  }
};

export const refineImage = async (base64ImageData: string, refinementPrompt: string): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: 'image/jpeg', // Assuming jpeg, could be dynamic
            },
          },
          {
            text: refinementPrompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });
    return extractImageFromResponse(response);
  } catch (error) {
    console.error("Gemini API error in refineImage:", error);
    throw new Error("Failed to refine image.");
  }
};


export const animateImage = async (base64ImageData: string, prompt: string) => {
  try {
    const operation = await ai.models.generateVideos({
      model: 'veo-2.0-generate-001',
      prompt: prompt,
      image: {
        imageBytes: base64ImageData,
        mimeType: 'image/jpeg',
      },
      config: {
        numberOfVideos: 1
      }
    });
    return { operation, ai };
  } catch (error) {
    console.error("Gemini API error in animateImage:", error);
    throw new Error("Failed to start image animation.");
  }
};